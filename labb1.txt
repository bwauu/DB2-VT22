drop database labb1;
create database labb1;
use labb1;

CREATE TABLE Movies (
id INTEGER PRIMARY KEY AUTO_INCREMENT,
title TEXT NOT NULL,
year INTEGER NOT NULL,
rating INTEGER DEFAULT 1
);
-- Table for Movie Genres --

create table Genres (
	id integer primary key auto_increment,
    name text not null
);

create table MoviesGenres (
	m_id INTEGER NOT NULL,
    g_id INTEGER NOT NULL
);

alter table MoviesGenres
add constraint FK_Movies foreign key (m_id) references Movies(id);

ALTER TABLE MoviesGenres
ADD CONSTRAINT FK_Genres FOREIGN KEY (g_id) REFERENCES Genres(id);

INSERT INTO Movies (title, year, rating) VALUES
("Star wars", "The last ledi", 2017, 9), #1
("The Emoji Movie", 2016, 1), #2
("The Matrix", 1999, 9), #3
("The Shawshank Redemption", 1994, 10), #4
("Titanic", 1997, 8), #5
("Wargames", 1983, 7), #6
("The Imitation Game", 2014, 8), #7
("Don't Look Up", 2014, 8); #8


INSERT INTO Genres (name) VALUES
("Action"), #1
("Comedy"), #2
("Drama"), #3
("Sci-fi"); #4

INSERT INTO MoviesGenres VALUES
(1, 1), (1,4), (2, 2), (2, 3), (3, 1), (3, 3), (3, 4), (4, 3), (5, 3), (6, 1), (6, 3), (7, 3), (8, 3), (8, 2);

/*  1. Skapa en vy (MovieGenre) som listar alla filmer och deras genre
Vi ska t ex kunna fraga vyn om SELECT title FROM MovieGenre WHERE genre "sci-fi" OBS queryn frägar vyn om genre'
(och det ska den (det ska inte stå name ')).
*/
CREATE VIEW MovieGenre AS
SELECT title, name FROM Movies
JOIN MoviesGenres 
ON Movies.id = m_id
JOIN Genres 
ON Genres.id = g_id ORDER BY Movies.id;

SELECT * FROM MovieGenre; 

/* 2. Skapa en vy (MoviesYears) som omformatterar resultat sà att vi fär filmtitel och artal
sorterade pà titel i ett fält likt:
Star Wars
- The Last Jedi (2017)
The Emoji Movie (2016)
osv vid SELECT * FROM MoviesYears
*/ 

CREATE VIEW MoviesYears AS 
	SELECT concat(title, " - ", year)  from Movies order by year desc;

SELECT * FROM MoviesYears;

/*
3. En vy (TopRated) som bara innehäller de filmer som har betyg 9 eller 10
(av en skala 1-10)
Ex pà användning: SELECT * FROM TopRated;
*/ 

CREATE VIEW TopRated AS 
SELECT title, rating
FROM Movies
WHERE rating > 8 
ORDER BY rating desc;

SELECT * FROM TopRated;


/*
4. En vy (GenreCount) som visar namn pà genre och antal filmer som det finns frän varje genre.
Ex pà användning SELECT * FROM GenreCount:
*/ 

CREATE VIEW GenreCount AS
SELECT name, count(*) FROM MovieGenre
GROUP by NAME;

SELECT * FROM GenreCount;

/*
5. En vy (GenreRatings) som visar namn pà genre och medelbetyg (avg_rating) för alla filmer inom varje genre.
Skriv sedan en query som använder vyn för att visa namn pà den genre som har högst betyg
*/ 

CREATE VIEW GenreRatings AS 
SELECT name, avg(rating) AS GenAvgRate FROM Genres
JOIN MoviesGenres 
ON Genres.id = g_id
JOIN Movies 
ON Movies.id = m_id
GROUP BY name; 

SELECT name
FROM GenreRatings
WHERE GenAvgRate = (
	SELECT MAX(GenAvgRate)
	FROM GenreRatings
    );